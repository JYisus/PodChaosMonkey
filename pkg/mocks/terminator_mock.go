// Code generated by MockGen. DO NOT EDIT.
// Source: terminator.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTerminator is a mock of Terminator interface.
type MockTerminator struct {
	ctrl     *gomock.Controller
	recorder *MockTerminatorMockRecorder
}

// MockTerminatorMockRecorder is the mock recorder for MockTerminator.
type MockTerminatorMockRecorder struct {
	mock *MockTerminator
}

// NewMockTerminator creates a new mock instance.
func NewMockTerminator(ctrl *gomock.Controller) *MockTerminator {
	mock := &MockTerminator{ctrl: ctrl}
	mock.recorder = &MockTerminatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTerminator) EXPECT() *MockTerminatorMockRecorder {
	return m.recorder
}

// KillRandomPod mocks base method.
func (m *MockTerminator) KillRandomPod(ctx context.Context, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KillRandomPod", ctx, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// KillRandomPod indicates an expected call of KillRandomPod.
func (mr *MockTerminatorMockRecorder) KillRandomPod(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KillRandomPod", reflect.TypeOf((*MockTerminator)(nil).KillRandomPod), ctx, namespace)
}
